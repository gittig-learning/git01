<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
<!--=====================================spring和mybatis的整合========================================-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--数据库连接池会根据url自动加载数据库驱动-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--使用set注入，把数据库连接池赋值给dataSource属性-->
        <property name="dataSource" ref="myDataSource"/>
        <!--读取配置文件-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="mapperLocations" value="classpath:mybatis/mapper/*Mapper.xml"/>
    </bean>
<!--MapperScannerConfigurer扫描mapper配置文件创建接口实现类对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定sqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定dao接口的包名，调用getMapper()方法，创建每一接口的dao对象，放到spring容器中，dao对象默认id值名称为首字母小写的接口名-->
        <property name="basePackage" value="org.example.dao"/>
    </bean>
<!--=========================================事务的配置==============================================-->

<!--组件扫描器，扫描注解，创建对象，并将对象放入到ioc容器中-->
    <context:component-scan base-package="org.example.service"/>
<!--声明事务管理器-->
    <bean id="transactionMannger" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <tx:advice id="myAdvice" transaction-manager="transactionMannger">
        <!--tx:attributes 表示配置事务的属性-->
        <tx:attributes>
            <!--指定方法的事务属性配置-->
            <tx:method name="addTest" propagation="REQUIRES_NEW"
                       rollback-for="java.lang.NullPointerException,org.example.service.exception.NotEnoughExceple"/>
            <!--方法命名有规则时，使用通配符指定更多的方法,首先配备完全方法名，其次带通配符方法名的，最后是通配符-->
            <!--service中增删改操作方法的事务属性设置-->
            <tx:method name="add*"  propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="updata*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <!--service中查询操作方法的事务属性设置-->
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
<!--proxy-target-class属性默认为false，默认采用jdk动态代理实现AOP-->
    <aop:config >
        <!--指定哪些包中使用事务-->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--配置增强器，关联advice和pointcut-->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>

</beans>